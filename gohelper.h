/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/invrainbow/ide/gohelper */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdint.h>
#include <stdlib.h>

typedef struct _GH_Build_Error {
    char* text;
    int32_t is_valid;
    char *filename;
    int32_t line;
    int32_t col;
    int32_t is_vcol;
} GH_Build_Error;


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoUint8 GHStartBuild(char* cmdstr);
extern void GHStopBuild();
extern void GHFreeBuildStatus(void* p, GoInt n);
extern GH_Build_Error* GHGetBuildStatus(GoInt* pstatus, GoInt* plines);
extern char* GHGetGoEnv(char* name);
extern void GHFree(void* p);
extern void GHFmtStart();
extern void GHFmtAddLine(char* line);
extern char* GHFmtFinish(GoInt fmtType);
extern GoUint8 GHCheckLicense();
extern GoUint8 GHGitIgnoreInit(char* repo);
extern GoUint8 GHGitIgnoreCheckFile(char* file);

#ifdef __cplusplus
}
#endif
