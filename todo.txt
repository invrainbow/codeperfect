Ideas
=====

Log window. A kind of log window showing what's happening behind the
scenes, but not autistic developer debug notes -- stuff that actually allows
the user to build a model of how their tool is working and a closer
relationship with the IDE. For example, "detected import, now indexing ___".

Context-aware autocomplete, including, if you're in a toplevel, all you
can write is func, const, var, and type.



Improvements
============

Create a string class.

Use our allocator for uthash_malloc.

Now that our memory isn't retarded anymore, rework Scoped_Table to not use
LIST_MALLOC. And also just rewrite large sections of Parser.

See how many LIST_MALLOCs should just be LIST_POOLs.



Features
========

Figure out fmt/lint/whatever on save. Or have a hotkey to do it?

Handle unicode. If we don't handle the stupid Unicode situation soon, we're
going to be fucked the longer we wait. Need to get that shit over with.
Probably the first thing we need to do as soon as indexing is done.

Handle nested vendor directories for Go too. And nested go.mod.

Make sure we invalidate the index as soon as a file changes, so that we don't
e.g.  jump to definition at wrong place. Additional notes: This most obvious
place this happens is when we're editing a file, and change a struct Foo. Then
we say "var foo Foo; foo." and the autocomplete menu is wrong, because it
hasn't updated with the newest Foo yet. (How do we fix this?)

Enable adding new files/folder in file explorer.

Our neovim integration gives complete access to :commands, /search, etc. Think
about how we should handle this. Also, Vim highlights when I search for stuff
are weird.

Make autocomplete on a blank line include accessible decls in current file.

Add syntax highlighting.

In insert mode, make closing brace de-indent.

Make our new insert mode handle multiple insert points, like ctrl-v + s.

Add nested parameter hints.

Make sure we're not able to trigger race condition by pressing i and some other
letters super fast. What might happen is I press i, before neovim signals mode
change, I press another letter, that gets sent to neovim, we get out of sync.

When user clicks on a search result, after opening the file, jump to the right
position too.

Set cursor when user hovers over something, like pane resizers.

Send ctrl+<key>s to nvim.

Make parameter hints show return type.



Bugs
====

When tabs overflow the tab bar, current tab just goes offscreen.

Typing "foo(bar(" will use parameter hint for foo, not bar.

Parameter hint doesn't color first parameter when first parameter is an
incomplete string.

User is able to undo the initial filling of buffer with filecontents, to bring
buffer back to being empty.

Autocomplete in helper.go is kind of slow again -- figure out why and fix.

Screen suddenly turned white, only tabs were drawn, why? Did we hit a
breakpoint mid-draw or something? (But shouldn't buffer swapping make it draw
all at once?) Related: text flashes for a second when replacing with vim's r.
Probably has to do with how we're receiving nvim_buf_lines_event. I think it's
because nvim_buf_lines_event is happening in a separate thread. Do we need to
lock? Or what's the solution here?

When using contextless autocomplete in a case statement, if you type a prefix,
then autocomplete, it ignores the prefix.  E.g. if you type "case fo", press
ctrl+space, and select "four", it will end up with "case fofour".



Purgatory
=========

[bug?] Go_Index reindexes twice whenever we save a file.  Update: I mean, the
debounce stops it from reindexing twice, but saving a file still sends two
filesystem change events. Not sure if worth fixing.

Earlier, when typing a literal value, it got into an infinite loop,
presumably inside parse_literal_value (judging by both the context of the crash
and also the error message it was printing out was from eat_comma). Can't
repro right now, but it's there.

