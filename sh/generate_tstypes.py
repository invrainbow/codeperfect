#!/usr/bin/env python3.9

import re


if __name__ == "__main__":

    def transform_ast_line(it):
        it = it.replace("__", "_").strip().lower()
        if it.startswith("anon_sym_dot = "):
            it = it.replace("anon_sym_dot", "anon_anon_dot")
        for prefix in ("anon_", "aux_", "alias_", "sym_"):
            it = it.removeprefix(prefix)
        return ("ts_" + it).upper()

    def transform_field_line(it):
        return it.strip().lower().replace("field_", "tsf_").upper()

    with open("tree-sitter-go/src/parser.c") as f:
        blocks = [it.splitlines() for it in f.read().split("\n\n")]
        enums = [it[1:-1] for it in blocks if it[0] == "enum {"]

    ast_types = [transform_ast_line(it) for it in enums[0]]
    field_types = [transform_field_line(it) for it in enums[1]]

    file = None
    write = lambda s: file.write(s + "\n")

    with open("tstypes.hpp", "w") as file:
        write("// generated by sh/generate_tstypes.py")
        write("#pragma once")
        write('#include "tree_sitter_crap.hpp"')

        write("enum Ts_Ast_Type {")
        write("    TS_ERROR = ((TSSymbol)-1),")
        for line in ast_types:
            write(f"    {line}")
        write("};")

        write("enum Ts_Field_Type {")
        for line in field_types:
            write(f"    {line}")
        write("};")

        write("ccstr ts_field_type_str(Ts_Field_Type type);")
        write("ccstr ts_ast_type_str(Ts_Ast_Type type);")

    with open("tstypes.cpp", "w") as file:
        write("// generated by sh/generate_tstypes.py")
        write('#include "common.hpp"')
        write('#include "tstypes.hpp"')

        write("ccstr ts_ast_type_str(Ts_Ast_Type type) {")
        write("    switch (type) {")
        for line in ast_types:
            write(f"    define_str_case({line.split()[0]});")
        write("    }")
        write("    return NULL;")
        write("}")

        write("ccstr ts_field_type_str(Ts_Field_Type type) {")
        write("    switch (type) {")
        for line in field_types:
            write(f"    define_str_case({line.split()[0]});")
        write("    }")
        write("    return NULL;")
        write("}")
