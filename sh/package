#!/bin/bash
set -e

# grab version
pushd go
version_arr=($(go run ./cmd/printversion))
version=${version_arr[0]}
version_string=${version_arr[1]}
popd

slug=x64

# build the actual app
if [[ -z "$NO_REBUILD" ]]; then
    RELEASE=1 sh/build
fi

# create scratch directory
rm -rf scratch/
mkdir scratch/
cd scratch

if [[ "$(../sh/detect_m1)" = "1" ]]; then
    slug=arm
fi

mv ../build/dsym debug-symbols

# create .app from ide
rm -rf CodePerfect.app
appify -name CodePerfect \
    -icon ../logo.png \
    -version $version_string \
    -author "CodePerfect" \
    -id com.codeperfect95 \
    ../build/ide
cp ../build/bin/* "CodePerfect.app/Contents/MacOS"
rm -rf CodePerfect.app/Contents/README

# codesign garbage
codesign --force --options runtime --sign 'Developer ID Application: Brandon Hsiao' CodePerfect.app/Contents/MacOS/bin/ide
codesign --deep --force --options runtime --sign 'Developer ID Application: Brandon Hsiao' CodePerfect.app

# zip up app
ditto -c -k --keepParent CodePerfect.app app.zip

# notarize
xcrun notarytool submit app.zip --keychain-profile AC_PASSWORD --wait
xcrun stapler staple CodePerfect.app
rm app.zip
ditto -c -k --keepParent CodePerfect.app app.zip

# push to s3
if [[ -z "$SKIP_UPLOAD" ]]; then
    filename="mac-$slug-$version_string.zip"
    aws s3 cp app.zip "s3://codeperfect95/app/$filename"
    aws s3 cp debug-symbols "s3://codeperfect-private/debug-symbols-$os-$slug-$version_string"
fi
