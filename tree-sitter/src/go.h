#pragma once

#include <tree_sitter/parser.h>

#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif

#define LANGUAGE_VERSION 12
#define STATE_COUNT 1182
#define LARGE_STATE_COUNT 22
#define SYMBOL_COUNT 196
#define ALIAS_COUNT 4
#define TOKEN_COUNT 90
#define EXTERNAL_TOKEN_COUNT 0
#define FIELD_COUNT 33
#define MAX_ALIAS_SEQUENCE_LENGTH 9

enum Ts_Go_Symbol {
  sym_identifier = 1,
  anon_sym_LF = 2,
  anon_sym_SEMI = 3,
  anon_sym_package = 4,
  anon_sym_import = 5,
  anon_sym_DOT = 6,
  sym_blank_identifier = 7,
  anon_sym_LPAREN = 8,
  anon_sym_RPAREN = 9,
  anon_sym_const = 10,
  anon_sym_COMMA = 11,
  anon_sym_EQ = 12,
  anon_sym_var = 13,
  anon_sym_func = 14,
  anon_sym_DOT_DOT_DOT = 15,
  anon_sym_type = 16,
  anon_sym_STAR = 17,
  anon_sym_LBRACK = 18,
  anon_sym_RBRACK = 19,
  anon_sym_struct = 20,
  anon_sym_LBRACE = 21,
  anon_sym_RBRACE = 22,
  anon_sym_interface = 23,
  anon_sym_map = 24,
  anon_sym_chan = 25,
  anon_sym_LT_DASH = 26,
  anon_sym_COLON_EQ = 27,
  anon_sym_PLUS_PLUS = 28,
  anon_sym_DASH_DASH = 29,
  anon_sym_STAR_EQ = 30,
  anon_sym_SLASH_EQ = 31,
  anon_sym_PERCENT_EQ = 32,
  anon_sym_LT_LT_EQ = 33,
  anon_sym_GT_GT_EQ = 34,
  anon_sym_AMP_EQ = 35,
  anon_sym_AMP_CARET_EQ = 36,
  anon_sym_PLUS_EQ = 37,
  anon_sym_DASH_EQ = 38,
  anon_sym_PIPE_EQ = 39,
  anon_sym_CARET_EQ = 40,
  anon_sym_COLON = 41,
  anon_sym_fallthrough = 42,
  anon_sym_break = 43,
  anon_sym_continue = 44,
  anon_sym_goto = 45,
  anon_sym_return = 46,
  anon_sym_go = 47,
  anon_sym_defer = 48,
  anon_sym_if = 49,
  anon_sym_else = 50,
  anon_sym_for = 51,
  anon_sym_range = 52,
  anon_sym_switch = 53,
  anon_sym_case = 54,
  anon_sym_default = 55,
  anon_sym_select = 56,
  anon_sym_new = 57,
  anon_sym_make = 58,
  anon_sym_PLUS = 59,
  anon_sym_DASH = 60,
  anon_sym_BANG = 61,
  anon_sym_CARET = 62,
  anon_sym_AMP = 63,
  anon_sym_SLASH = 64,
  anon_sym_PERCENT = 65,
  anon_sym_LT_LT = 66,
  anon_sym_GT_GT = 67,
  anon_sym_AMP_CARET = 68,
  anon_sym_PIPE = 69,
  anon_sym_EQ_EQ = 70,
  anon_sym_BANG_EQ = 71,
  anon_sym_LT = 72,
  anon_sym_LT_EQ = 73,
  anon_sym_GT = 74,
  anon_sym_GT_EQ = 75,
  anon_sym_AMP_AMP = 76,
  anon_sym_PIPE_PIPE = 77,
  sym_raw_string_literal = 78,
  anon_sym_DQUOTE = 79,
  aux_sym_interpreted_string_literal_token1 = 80,
  sym_escape_sequence = 81,
  sym_int_literal = 82,
  sym_float_literal = 83,
  sym_imaginary_literal = 84,
  sym_rune_literal = 85,
  sym_nil = 86,
  sym_true = 87,
  sym_false = 88,
  sym_comment = 89,
  sym_source_file = 90,
  sym_package_clause = 91,
  sym_import_declaration = 92,
  sym_import_spec = 93,
  sym_dot = 94,
  sym_import_spec_list = 95,
  sym__declaration = 96,
  sym_const_declaration = 97,
  sym_const_spec = 98,
  sym_var_declaration = 99,
  sym_var_spec = 100,
  sym_function_declaration = 101,
  sym_method_declaration = 102,
  sym_parameter_list = 103,
  sym_parameter_declaration = 104,
  sym_variadic_parameter_declaration = 105,
  sym_type_alias = 106,
  sym_type_declaration = 107,
  sym_type_spec = 108,
  sym_expression_list = 109,
  sym_parenthesized_type = 110,
  sym__simple_type = 111,
  sym_pointer_type = 112,
  sym_array_type = 113,
  sym_implicit_length_array_type = 114,
  sym_slice_type = 115,
  sym_struct_type = 116,
  sym_field_declaration_list = 117,
  sym_field_declaration = 118,
  sym_interface_type = 119,
  sym_method_spec_list = 120,
  sym_method_spec = 121,
  sym_map_type = 122,
  sym_channel_type = 123,
  sym_function_type = 124,
  sym_block = 125,
  sym__statement_list = 126,
  sym__statement = 127,
  sym_empty_statement = 128,
  sym__simple_statement = 129,
  sym_send_statement = 130,
  sym_receive_statement = 131,
  sym_inc_statement = 132,
  sym_dec_statement = 133,
  sym_assignment_statement = 134,
  sym_short_var_declaration = 135,
  sym_labeled_statement = 136,
  sym_empty_labeled_statement = 137,
  sym_fallthrough_statement = 138,
  sym_break_statement = 139,
  sym_continue_statement = 140,
  sym_goto_statement = 141,
  sym_return_statement = 142,
  sym_go_statement = 143,
  sym_defer_statement = 144,
  sym_if_statement = 145,
  sym_for_statement = 146,
  sym_for_clause = 147,
  sym_range_clause = 148,
  sym_expression_switch_statement = 149,
  sym_expression_case = 150,
  sym_default_case = 151,
  sym_type_switch_statement = 152,
  sym__type_switch_header = 153,
  sym_type_case = 154,
  sym_select_statement = 155,
  sym_communication_case = 156,
  sym__expression = 157,
  sym_parenthesized_expression = 158,
  sym_call_expression = 159,
  sym_variadic_argument = 160,
  sym_special_argument_list = 161,
  sym_argument_list = 162,
  sym_selector_expression = 163,
  sym_index_expression = 164,
  sym_slice_expression = 165,
  sym_type_assertion_expression = 166,
  sym_type_conversion_expression = 167,
  sym_composite_literal = 168,
  sym_literal_value = 169,
  sym_keyed_element = 170,
  sym_element = 171,
  sym_func_literal = 172,
  sym_unary_expression = 173,
  sym_binary_expression = 174,
  sym_qualified_type = 175,
  sym_interpreted_string_literal = 176,
  aux_sym_source_file_repeat1 = 177,
  aux_sym_import_spec_list_repeat1 = 178,
  aux_sym_const_declaration_repeat1 = 179,
  aux_sym_const_spec_repeat1 = 180,
  aux_sym_var_declaration_repeat1 = 181,
  aux_sym_parameter_list_repeat1 = 182,
  aux_sym_type_declaration_repeat1 = 183,
  aux_sym_field_name_list_repeat1 = 184,
  aux_sym_expression_list_repeat1 = 185,
  aux_sym_field_declaration_list_repeat1 = 186,
  aux_sym_method_spec_list_repeat1 = 187,
  aux_sym__statement_list_repeat1 = 188,
  aux_sym_expression_switch_statement_repeat1 = 189,
  aux_sym_type_switch_statement_repeat1 = 190,
  aux_sym_type_case_repeat1 = 191,
  aux_sym_select_statement_repeat1 = 192,
  aux_sym_argument_list_repeat1 = 193,
  aux_sym_literal_value_repeat1 = 194,
  aux_sym_interpreted_string_literal_repeat1 = 195,
  alias_sym_field_identifier = 196,
  alias_sym_label_name = 197,
  alias_sym_package_identifier = 198,
  alias_sym_type_identifier = 199,
};

enum Ts_Go_Field {
  field_alias = 1,
  field_alternative = 2,
  field_arguments = 3,
  field_body = 4,
  field_capacity = 5,
  field_channel = 6,
  field_communication = 7,
  field_condition = 8,
  field_consequence = 9,
  field_element = 10,
  field_end = 11,
  field_field = 12,
  field_function = 13,
  field_index = 14,
  field_initializer = 15,
  field_key = 16,
  field_label = 17,
  field_left = 18,
  field_length = 19,
  field_name = 20,
  field_operand = 21,
  field_operator = 22,
  field_package = 23,
  field_parameters = 24,
  field_path = 25,
  field_receiver = 26,
  field_result = 27,
  field_right = 28,
  field_start = 29,
  field_tag = 30,
  field_type = 31,
  field_update = 32,
  field_value = 33,
};

